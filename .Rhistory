} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
} else {
net$Parameters$Default<-NULL
net$Parameters$Bondaries<-NULL
}
is.null(net$Parameters$Default)
library(AMoNet)
load(file.path(DIR,BESTone))
!is.null(net$Parameters$Default)
if(!is.null(net$Parameters$Default)){
VARname<-gsub(NameProjbase,"",FILES)
VARname<-unlist(strsplit(VARname,"_"))
VARname<-unique(gsub(".Rdata","",VARname))
#VARname<-unique(gsub(".Rdata","", gsub(NameProjbase,"", unlist(strsplit(FILES,"_")))))
VARname<-VARname[is.na(as.numeric(VARname))]
VARname<-VARname[!VARname%in%""]
VARname<-VARname[VARname%in%names(net$Parameters$Default)]
#VARname
RES<-list()
#i=VARname[1]
for(i in VARname){
# value of the variable from the file names
RES[[i]]<-abs(as.numeric(unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))))
if(any(is.na(RES[[i]]))){
RES[[i]]<-unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))
}
# position of the name in the file names
CHECK<-lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1])
names(RES[[i]])<-which(lapply(CHECK,length)!=0)
}
# do a linear regression of the parameters one by one to deduce best shot
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
for(i in VARname){
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
} else {
net$Parameters$Default<-NULL
net$Parameters$Bondaries<-NULL
}
if(!is.null(net$Parameters$Default)){
VARname<-gsub(NameProjbase,"",FILES)
VARname<-unlist(strsplit(VARname,"_"))
VARname<-unique(gsub(".Rdata","",VARname))
#VARname<-unique(gsub(".Rdata","", gsub(NameProjbase,"", unlist(strsplit(FILES,"_")))))
VARname<-VARname[is.na(as.numeric(VARname))]
VARname<-VARname[!VARname%in%""]
VARname<-VARname[VARname%in%names(net$Parameters$Default)]
#VARname
RES<-list()
#i=VARname[1]
for(i in VARname){
# value of the variable from the file names
RES[[i]]<-abs(as.numeric(unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))))
if(any(is.na(RES[[i]]))){
RES[[i]]<-unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))
}
# position of the name in the file names
CHECK<-lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1])
names(RES[[i]])<-which(lapply(CHECK,length)!=0)
}
# do a linear regression of the parameters one by one to deduce best shot
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
for(i in VARname){
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
} else {
net$Parameters$Default<-NULL
net$Parameters$Bondaries<-NULL
}
i=VARname[1]
RES[[i]]<-abs(as.numeric(unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))))
if(any(is.na(RES[[i]]))){
RES[[i]]<-unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))
}
CHECK<-lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1])
names(RES[[i]])<-which(lapply(CHECK,length)!=0)
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
RES
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
is.numeric(RES[[i]])
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
is.numeric(RES[[i]])
for(i in VARname){
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
par(mfrow=c(1,1))
!is.null(addOutputs)
dim(AMoNet::GenesSelecImmuno)
dim(AMoNet::GenesSelectImmuno)
MECA<-names_MECA
library(AMoNet)
roxygen2::roxygenise()
net<-SelectGridSearch(NameProjbase = NameProjbase,
DIR=DIR, Default=Default,
ValSelect=T)
net$Parameters$Default$nblayers
net$Parameters$Default$MinConnect
rm(net)
AMoNet::Default$nblayers
net<-SelectGridSearch(NameProjbase = NameProjbase,
DIR=DIR, Default=Default,
ValSelect=T)
names(net)
COSTS<-list()
FILES<-list.files(DIR, pattern = NameProjbase)
print(FILES)
COST<-lapply(FILES,function(f){
x<-load(file.path(DIR,f))
net<-get(x)
if(ValSelect){
if("Cindex"%in%names(net$Predict_Val$metrics)){
print("Select on validation C-index")
COSTsim<-as.numeric(1-net$Predict_Val$metrics$Cindex[1])
} else {
print("Select on validation Cost")
COSTsim<-net$Predict_Val$metrics$Cost
}
} else {
if("Cindex"%in%names(net$Predict_Train$metrics)){
print("Select on training C-index")
COSTsim<-as.numeric(1-net$Predict_Train$metrics$Cindex[1])
# } else if(!is.null(MiniBatch)){
#   MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
#    if(MNB==0){MNB=10}
#    COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
} else {
print("Select on training Cost")
COSTsim<-net$Predict_Train$metrics$Cost
#  if(!is.null(Default$MiniBatch)){
#MNB<-round(length(unlist(net$TrainSplit$Train))/net$Parameters$Default$MiniBatch)
# if(MNB==0){MNB=1}
#COSTsim<-median(as.numeric(tail(unlist(net$Predict_Train$metrics$Cost),MNB)))
#  } else {
# last train cost
#    COSTsim<-tail(as.numeric(unlist(NETallProp$Cost)),1)
#  }
}
}
return(COSTsim)
})
names(COST)<-FILES
COST<-unlist(COST)
BESTone<-names(which(COST==min(COST)))[1]
print(paste("Best AMoNet is :", gsub(".Rdata","",BESTone) ))
load(file.path(DIR,BESTone))
NETallpre<-net$history$NETallList[[length(net$history$NETallList)]]
plot(net, network = T)
if(!is.null(net$Parameters$Default)){
VARname<-gsub(NameProjbase,"",FILES)
VARname<-unlist(strsplit(VARname,"_"))
VARname<-unique(gsub(".Rdata","",VARname))
#VARname<-unique(gsub(".Rdata","", gsub(NameProjbase,"", unlist(strsplit(FILES,"_")))))
VARname<-VARname[is.na(as.numeric(VARname))]
VARname<-VARname[!VARname%in%""]
VARname<-VARname[VARname%in%names(net$Parameters$Default)]
#VARname
RES<-list()
#i=VARname[1]
for(i in VARname){
# value of the variable from the file names
RES[[i]]<-abs(as.numeric(unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))))
if(any(is.na(RES[[i]]))){
RES[[i]]<-unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))
}
# position of the name in the file names
CHECK<-lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1])
names(RES[[i]])<-which(lapply(CHECK,length)!=0)
}
# do a linear regression of the parameters one by one to deduce best shot
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
for(i in VARname){
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
} else {
net$Parameters$Default<-NULL
net$Parameters$Bondaries<-NULL
}
if(length(FILES)>1){
#f<-FILES[2]
### learning curves, cost first, or cindex if available
# for validation+++ or train
# todo: add other metrics: accuracy, F1, etc...
COST<-lapply(FILES,function(f){
x<-load(file.path(DIR,f))
net<-get(x)
if(ValSelect){
if("Cindex"%in%names(net$Predict_Val$metrics)){
print("Select on validation C-index")
COSTsim<-as.numeric(1-net$Predict_Val$metrics$Cindex[1])
} else {
print("Select on validation Cost")
COSTsim<-net$Predict_Val$metrics$Cost
}
} else {
if("Cindex"%in%names(net$Predict_Train$metrics)){
print("Select on training C-index")
COSTsim<-as.numeric(1-net$Predict_Train$metrics$Cindex[1])
# } else if(!is.null(MiniBatch)){
#   MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
#    if(MNB==0){MNB=10}
#    COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
} else {
print("Select on training Cost")
COSTsim<-net$Predict_Train$metrics$Cost
#  if(!is.null(Default$MiniBatch)){
#MNB<-round(length(unlist(net$TrainSplit$Train))/net$Parameters$Default$MiniBatch)
# if(MNB==0){MNB=1}
#COSTsim<-median(as.numeric(tail(unlist(net$Predict_Train$metrics$Cost),MNB)))
#  } else {
# last train cost
#    COSTsim<-tail(as.numeric(unlist(NETallProp$Cost)),1)
#  }
}
}
return(COSTsim)
})
names(COST)<-FILES
COST<-unlist(COST)
BESTone<-names(which(COST==min(COST)))[1]
print(paste("Best AMoNet is :", gsub(".Rdata","",BESTone) ))
load(file.path(DIR,BESTone))
#  net<-prebuilt.AMoNet(net, NETall=NULL, MeanWinit = 0.1, SdWinit = 0.1, LSTM=F, Optimizer = Default$Optimizer, Outputs="Output", NameProj="AMoNet_TCGA")
# plot it
NETallpre<-net$history$NETallList[[length(net$history$NETallList)]]
#NETall<-PlotOptNet(NETall = NETallpre,PDF = F,Optimized = T,
#                   NameProj = paste(NameProjbase,"\nmin cost=", round(min(COST),4) ) ,
#                   PrintOptNET = T)
plot(net, network = T)
###################
# retrieve hyperparamters
if(!is.null(net$Parameters$Default)){
VARname<-gsub(NameProjbase,"",FILES)
VARname<-unlist(strsplit(VARname,"_"))
VARname<-unique(gsub(".Rdata","",VARname))
#VARname<-unique(gsub(".Rdata","", gsub(NameProjbase,"", unlist(strsplit(FILES,"_")))))
VARname<-VARname[is.na(as.numeric(VARname))]
VARname<-VARname[!VARname%in%""]
VARname<-VARname[VARname%in%names(net$Parameters$Default)]
#VARname
RES<-list()
#i=VARname[1]
for(i in VARname){
# value of the variable from the file names
RES[[i]]<-abs(as.numeric(unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))))
if(any(is.na(RES[[i]]))){
RES[[i]]<-unlist(lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1]))
}
# position of the name in the file names
CHECK<-lapply(strsplit(FILES,"_"),function(x)x[grep(i,x)+1])
names(RES[[i]])<-which(lapply(CHECK,length)!=0)
}
# do a linear regression of the parameters one by one to deduce best shot
par(mfrow=c(2,2))
par(mar=c(5,4,4,2)+0.1)
for(i in VARname){
VAR<-RES[[i]]
CO<-COST[as.numeric(names(RES[[i]]))]
if(is.numeric(RES[[i]])){
plot(CO, VAR, main=i,ylab=i,xlab=paste( ifelse(ValSelect,"Validation","Training"),"Cost") )
MODEL<-lm(VAR~CO) # bof
if(!any(is.na(MODEL$coefficients))){
abline(MODEL)
PRED<-MODEL$coefficients[1]+MODEL$coefficients[2]*10^-8
PVALUE<-summary(MODEL)$coeff[2,4]
COR<-cor(CO,VAR)
legend("topright",legend = c(paste("pred best =", round(PRED,3)),paste("R2 =",round(COR,3) ),
paste("p =",round(PVALUE,3) )), cex=0.7)
} else {
PVALUE=1
COR<-0.5
PRED<-0
}
if(!any(is.na(c(PVALUE,COR,PRED)))){
if((PVALUE<0.05|abs(COR)>0.5)&PRED>0){
# predicted hyperparameters from linear regression
net$Parameters$Default[[i]]<-as.numeric(PRED)
net$Parameters$Bondaries[[i]]<-as.numeric(confint(MODEL,level = 0.2)[1,])
#MODEL$df.residual
} else{
net$Parameters$Default[[i]]<-as.numeric(VAR[CO==min(CO)])
#Bondaries[[i]]<-as.numeric(VAR[tail(order(CO,decreasing = F), 2 )])
# add the difference to median of the 3 best results
MedianBest<-median(VAR[tail(order(CO,decreasing = T), 3)])-VAR[CO==min(CO)]
net$Parameters$Bondaries[[i]]<-sort(VAR[CO==min(CO)]+c(MedianBest,-MedianBest))
}
}
} else {
CO<-COST[as.numeric(names(RES[[i]]))]
bp<-boxplot(CO~RES[[i]], ylab=paste( ifelse(ValSelect,"Validation","Training"),"Cost"), main = i)
PRED<-bp$names[bp$stats[3,]==min(bp$stats[3,])]
Default[[i]]<-PRED
}
}
} else {
net$Parameters$Default<-NULL
net$Parameters$Bondaries<-NULL
}
} else {#if(length(FILES)==1) {
BESTone<-FILES
print(paste("Selected AMoNet is :", gsub(".Rdata","",BESTone) ))
load(paste(DIR,BESTone,sep = ""))
# check it
#  NETallpre<-NETallProp$NETallList[[length(NETallProp$NETallList)]]
#  NETall<-PlotOptNet(NETall = NETallpre,PDF = F,Optimized = T,
#                     NameProj = paste(NameProjbase, "\nmin", ifelse(ValSelect,"Validation","Training"),
#                                      "=", round(min(COST),4) ) ,
#                     PrintOptNET = T)
}
roxygen2::roxygenise()
net<-SelectGridSearch(NameProjbase = NameProjbase,
DIR=DIR, Default=Default,
ValSelect=T)
NETall1<-NETdata$NETall # the best net
FILES
FILES<-FILES[1]
x<-load(file.path(DIR,FILES))
net<-get(x)
net$Parameters$Default$organ

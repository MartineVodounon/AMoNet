try(library(AMoNet))
library(AMoNet)
try(library(YHF))
tryCatch(library(YHF))
XV<-tryCatch(library(YHF))
XV
class(XV)
XV
XV<-try(library(YHF))
XV
class(XV)
XV<-try(library(AMoNet))
XV
class(XV)
XV
XV<-try(library(YHF))
XV
XV[1]
XV[2]
XV[[1]]
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
hh <- paste(unlist(args),collapse=' ')
listoptions <- unlist(strsplit(hh,'--'))[-1]
options.args <- sapply(listoptions,function(x){
unlist(strsplit(x, ' '))[-1]
})
options.names <- sapply(listoptions,function(x){
option <-  unlist(strsplit(x, ' '))[1]
})
names(options.args) <- unlist(options.names)
options.args<-lapply(options.args,function(Correct){
if(length(Correct)==0){
return("")
} else if(all(!is.na(as.numeric(Correct)))){
return(as.numeric(Correct))
} else if(exists(Correct)){
return(eval(parse(text = Correct)))
} else {
return(Correct)
}
})
print("options are:")
print(options.args)
args.needed<-setdiff(names(formals(RunTCGAopt)),c("Default","Boundaries"))
InterArg<-intersect(names(options.args),args.needed)
?system.file()
XV<-try(library(AMoNet),silent = T)
if("try-error"%in%class(XV)){
print("Installing AMoNet from gitlab.")
devtools::install_git("https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git", dependencies = TRUE)
library(AMoNet)
}
library(AMoNet)
XV<-try(library(AMoNet),silent = T)
if("try-error"%in%class(XV)){
print("Installing AMoNet from gitlab.")
devtools::install_git("https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git", dependencies = TRUE)
library(AMoNet)
}
system.file('Rwrapper/RunTCGAopt_HPC', package='AMoNet')
roxygen2::roxygenise()
devtools::load_all()
XV<-try(library(AMoNet),silent = T)
if("try-error"%in%class(XV)){
print("Installing AMoNet from gitlab.")
devtools::install_git("https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git", dependencies = TRUE)
library(AMoNet)
}
system.file('Rwrapper/RunTCGAopt_HPC', package='AMoNet')
system.file('bash/text.sh', package='AMoNet')
system.file('Rwrapper/RunTCGAopt', package='AMoNet')
system.file('Rwrapper/Install.R', package='AMoNet')
system.file('Rwrapper/', package='AMoNet')
system.file('Rwrapper/Run', package='AMoNet')
system.file('Rwrapper/Dra', package='AMoNet')
system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet')
cat(system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet'))
DirWrapper<-system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet')
DirWrapper
DirWrapperDraw<-system.file('Rwrapper/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
DirWrapperGS<-system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('Rwrapper/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
?system()
?source
?Rscript
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
Run<- args; source(file = DirWrapperGS)
Rscript
try(args)
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
try(args)
XV<-try(args)
library(AMoNet)
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
DirWrapperGS<-system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('Rwrapper/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
source(file = DirWrapperGS)
PlotAndPredict
?PlotAndPredict
library(AMoNet)
devtools::load_all()
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
Ntrials<-1
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
DirWrapperDraw
system.file(package='AMoNet')
getwd()
getwd()
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
getwd()
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
getwd()
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
getwd()
setwd("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
getwd()
opts_chunk$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
opts_chunk$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
getwd()
opts_chunk$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
getwd()
DirWrapperGS<-system.file('Rwrapper/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('Rwrapper/DrawGridSearch.R', package='AMoNet')
DirWrapperDraw<-system.file('Rwrapper/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
args<-"--Param nblayers MinConnect --NameProj HallmarksLung --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad"
Ntrials<-1
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
etwd()
getwd()
file.path(getwd(),"model")
list.files(file.path(getwd(),"model"))
x<-load(list.files(file.path(getwd(),"model"))[1])
x<-load(list.files(file.path(getwd(),"model"))[1])
list.files(file.path(getwd(),"model"))[1]
list.dirs(file.path(getwd(),"model"))
list.dirs(file.path(getwd(),"model/"))
list.dirs(file.path(getwd(),"model/"),recursive = T)
x<-load(file.path(getwd(),"model", list.files(file.path(getwd(),"model"))[1]))
x
net<-get(x)
net<-PlotAndPredict(net)
library(AMoNet)
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
# set arguments
args<-"--Param nblayers MinConnect --NameProj LUNG_AMoNet --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --lambda 0"
# set the number of training trials
Ntrials<-3
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
DIR
DIR<-getwd()
DIR
if(length(grep("/model",DIR))==0){
DIR<-file.path(DIR,"model/")
}
DIR
library(AMoNet)
length(list.files(DIR))
list.files(DIR)
library(AMoNet)
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
args<-"--NameProj LUNG_AMoNet --Validation T"
source(DirWrapperDraw)
hh <- paste(unlist(args),collapse=' ')
listoptions <- unlist(strsplit(hh,'--'))[-1]
options.args <- sapply(listoptions,function(x){
unlist(strsplit(x, ' '))[-1]
})
options.names <- sapply(listoptions,function(x){
option <-  unlist(strsplit(x, ' '))[1]
})
names(options.args) <- unlist(options.names)
library(AMoNet)
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
args<-"--NameProj LUNG_AMoNet --Validation T"
source(DirWrapperDraw)
getwd()
length(grep("/model",DIR))
DIR
length(grep("/model/",DIR))
grep("/model/",DIR)
DIR
getwd()
DIR<-getwd()
DIR
length(grep("/model",DIR))
DIR<-file.path(DIR,"model/")
DIR
if(length(list.files(DIR))==0){
print("Set DIR to root/ or model/")
}
dirPlot<-gsub("/model/","/tmp/",DIR)
dirPlot
FILES<-list.files(dirData,pattern = paste("^",NameProjbase, sep = ""))
FILES
file.path(dirData,f)
file.path(dirData,FILES)
file.path(dirPlot,"/learningCurves_", NameProjbase, ".pdf")
file.path(dirPlot,paste("/learningCurves_", NameProjbase, ".pdf",sep = "") )
library(AMoNet)
args<-"--NameProj LUNG_AMoNet --Validation T"
source(DirWrapperDraw)
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
library(RCurl)
?scp
?ssh
system("ssh lverling@calcsub.curie.fr")
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
DirWorkflow
system(DirWorkflow)
DIR<-"data/tmp/lverling/"
?RCurl
library(ssh)
installed.packages("ssh")
install.packages("ssh")
library(ssh)
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
DirWorkflow
out<-ssh::ssh_exec_wait(session,command = DirWorkflow)
DirHPC<-"/data/tmp/lverling"
DirWorkflow
installed.packages("AMoNet")
DirWorkflow
gsub("AMoNet.*","", DirWorkflow)
gsub("AMoNet.*","AMoNet", DirWorkflow)
DirPack<-gsub("AMoNet.*","AMoNet", DirWorkflow)
?scp_upload
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
system(DirWorkflow)
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
DirWorkflow
DirWrapperGS
roxygen2::roxygenise()
library(AMoNet)
devtools::load_all()
knitr::opts_knit$set(root.dir = 'C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet')
DirWrapperGS<-system.file('R/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('R/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
DirWorkflow
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = DirWorkflow, to = DirHPC,verbose = T)
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/workflow.sh",package = "AMoNet")
DirWorkflow
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = DirWorkflow, to = DirHPC,verbose = T)
ssh::scp_upload(session, files = DirWorkflow, to = DirHPC,verbose = T)
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
system.file("bash/",package = "AMoNet")
list.files(system.file("bash/",package = "AMoNet"))
DirWorkflow<-system.file("bash/",package = "AMoNet")
file.path(DirWorkflow, list.files(DirWorkflow))
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
DirRun<-system.file("bash/workflow.sh",package = "AMoNet")
out<-ssh::ssh_exec_wait(session,command = DirWorkflow)
out<-ssh::ssh_exec_wait(session,command = DirRun)
DirRun
out<-ssh::ssh_exec_wait(session,command = "workflow.sh")
DirHPC
out<-ssh::ssh_exec_wait(session,command = file.path(DirHPC, "workflow.sh"))
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = file.path(DirHPC, "permission.sh"))
out<-ssh::ssh_exec_wait(session,command = "chmod 777 *")
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = "chmod 777 *")
out<-ssh::ssh_exec_wait(session,command = "chmod 777 /data/tmp/lverling/*")
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
paste("chmod 777",DirHPC,"*")
paste("chmod 777 ",DirHPC,"/*",sep = "")
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
file.path(DirHPC, "workflow.sh")
out<-ssh::ssh_exec_wait(session,command = file.path(DirHPC, "workflow.sh"))
file.path(DirHPC, "workflow.sh")
paste(".",file.path(DirHPC, "workflow.sh"),sep = "")
out<-ssh::ssh_exec_wait(session,command = paste(".",file.path(DirHPC, "workflow.sh"),sep = ""))
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
out<-ssh::ssh_exec_wait(session,command = paste(".",file.path(DirHPC, "workflow.sh"),sep = ""))
out<-ssh::ssh_exec_wait(session,command = file.path(DirHPC, "workflow.sh"))
file.path(DirHPC, "workflow.sh")
ssh::ssh_home()
ssh::ssh_info()
ssh::ssh_info
print(session)
cat(file.path(DirHPC, "workflow.sh"))
file.path(DirHPC, "workflow.sh")
'cat(file.path(DirHPC, "workflow.sh"))'
ssh::ssh_exec_wait(session,command = './data/tmp/lverling/workflow.sh')
ssh::ssh_exec_wait(session,command = '/data/tmp/lverling/./workflow.sh')
ssh::ssh_exec_wait(session,command = '/data/tmp/lverling/workflow.sh')
ssh::ssh_exec_wait(session,command = 'cat /data/tmp/lverling/workflow.sh')
ssh::ssh_exec_wait(session,command = 'sh /data/tmp/lverling/workflow.sh')
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
ssh::ssh_exec_wait(session,command = file.path(DirHPC, "workflow1.sh"))
ssh::ssh_exec_wait(session,command = 'sh /data/tmp/lverling/workflow1.sh')
file.path(DirHPC, "workflow1.sh")
ssh::ssh_exec_wait(session,command = paste("sh",file.path(DirHPC, "workflow1.sh")))
ssh::ssh_exec_wait(session,command = paste("sh",file.path(DirHPC, "workflow.sh")))
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
ssh::ssh_exec_wait(session,command = paste("sh",file.path(DirHPC, "workflow.sh")))
DirHPC
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC), paste("sh",file.path(DirHPC, "workflow.sh"))))
paste("cd",DirHPC)
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC), "pwd"))
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC), "pwd", "echo 'hello'"))
echo $INIT'
echo $INIT"
ddd
<<<<<<<<<<<<<<<<
}
quit()
)))))))))))
)
''
"INIT=$(qsub -v CLASS='--Param lambda learningrate --DIR /data/tmp/lverling/PossiLandscape/ --NameProj LUNG --GENESman EGFR MTOR --Interval 10 --NewNet T --iteration 40 --SelectMECA HALLMARK --organ lusc|luad|hnsc --alpha 2 --MinStepsForward 10 --MiniBatch 64 ' -t 1-10 sub_TCGA.sh)
""
"
"INIT=$(qsub -v CLASS='--Param lambda learningrate --DIR /data/tmp/lverling/PossiLandscape/ --NameProj LUNG --GENESman EGFR MTOR --Interval 10 --NewNet T --iteration 40 --SelectMECA HALLMARK --organ lusc|luad|hnsc --alpha 2 --MinStepsForward 10 --MiniBatch 64 ' -t 1-10 sub_TCGA.sh) echo $INIT"
cmd<-"INIT=$(qsub -v CLASS='--Param lambda learningrate --DIR /data/tmp/lverling/PossiLandscape/ --NameProj LUNG --GENESman EGFR MTOR --Interval 10 --NewNet T --iteration 40 --SelectMECA HALLMARK --organ lusc|luad|hnsc --alpha 2 --MinStepsForward 10 --MiniBatch 64 ' -t 1-10 sub_TCGA.sh) echo $INIT"
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC), cmd))
DirWorkflow
system("dos2unix DirWorkflow")
system("dos2unix C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet/inst/bash/workflow.sh")
getwd
getwd()
system("dos2unix /home/l_verlingue/Desktop/ModelK/Rpack/AMoNet/inst/bash/workflow.sh")
system("cat /home/l_verlingue/Desktop/ModelK/Rpack/AMoNet/inst/bash/workflow.sh")
system("cat workflow.sh")
system("echo 'hello'")
cmd
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirHPC<-"/data/tmp/lverling"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC), "sh workflow1.sh"))
paste("cd",DirHPC)
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow1.sh"))
out<-ssh::ssh_exec_wait(session,command = paste("dos2unix",DirHPC,"/*",sep = "") )
out<-ssh::ssh_exec_wait(session,command = paste("dos2unix ",DirHPC,"/*",sep = "") )
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
ssh::ssh_exec_wait(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow1.sh"))
print(DirWrapperGS)
print(DirWrapperDraw)
net<-AMoNet(GENESman = c("TP53","EGFR"))
net<-AMoNet(GENESman = c("MTOR","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet_TCGA")
#Don't Run
net<-prebuilt.AMoNet(net, NETall=NULL, MeanWinit = 0.1, SdWinit = 0.1, LSTM=F, Optimizer = Default$Optimizer, Outputs="Output", NameProj="AMoNet_TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-LoadCleanTCGA(net, Species = Species, Param = "", RestrictUnique = T, organ = "luad")
ssh:ssh_disconnect(session)
ssh::ssh_disconnect(session)
net<-RandomiStates(net)
#iStates<-net$iStates
dim(net$Data$y);length(net$Data$MUT);dim(net$iStates); length(Species)
net<-train.AMoNet(net, y=net$Data$y, MUT=net$Data$MUT, treatmt=NULL,
iStates= net$iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=1,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 0, lambda = 0,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
plot(net$history)
library(AMoNet)
net<-train.AMoNet(net, y=net$Data$y, MUT=net$Data$MUT, treatmt=NULL,
iStates= net$iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=1,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 0, lambda = 0.1,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
net<-train.AMoNet(net, y=net$Data$y, MUT=net$Data$MUT, treatmt=NULL,
iStates= net$iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=3,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 0, lambda = 0.1,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
library(AMoNet)
net<-AMoNet(GENESman = c("MTOR","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet_TCGA")
#Don't Run
net<-prebuilt.AMoNet(net, NETall=NULL, MeanWinit = 0.1, SdWinit = 0.1, LSTM=F, Optimizer = Default$Optimizer, Outputs="Output", NameProj="AMoNet_TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-LoadCleanTCGA(net, Species = Species, Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net)
#iStates<-net$iStates
dim(net$Data$y);length(net$Data$MUT);dim(net$iStates); length(Species)
net<-train.AMoNet(net, y=net$Data$y, MUT=net$Data$MUT, treatmt=NULL,
iStates= net$iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=3,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 1, lambda = 0.1,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
library(AMoNet)
net<-train.AMoNet(net, y=net$Data$y, MUT=net$Data$MUT, treatmt=NULL,
iStates= net$iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=3,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 1, lambda = 0.1,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
plot(net$history)

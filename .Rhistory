if(FALSE){
MUT[2,"TP53"]<-"mut"
MUT[2,"EGFR"]<-"mut"
} else{ # or
MUT[2,"TP53"]<-(-1)
MUT[2,"EGFR"]<-1
}
print(MUT[,1:10])
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net,Npat = 1:2,PDF = F, ylim=c(0,1), Species = "Output", col=c(2,3))
Clin<-matrix(c(0.9,0.2),nrow = 1)
colnames(Clin)<-c("Pat1","Pat2")
rownames(Clin)<-"Output"
print(Clin)
net<-train.AMoNet(net,y=Clin,MUT=MUT,ValMut = 100,iteration=10, learning_rate=0.04, PDF=F, GIF=F, Visualize=NULL, Parallelize=F, alpha=0, Optimizer=NULL)
plot(net$history)
class(net$history)
plot(net$history)
library(AMoNet)
plot(net$history)
#dim(net$TotAttractors)
#print(net$history)
#plot(net,LEGEND = F, PDF = F)
names(net$Data)
print(net$Data)
library(AMoNet)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-AMoNet(c("TP53","EGFR"))
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
DATA<-LoadCleanTCGA(net, Species = Species,
Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net,RETURN = T)
net$iStates
net<-LoadCleanTCGA(net, Species = Species,
Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net, RETURN = T)
iStates<-net$iStates
dim(DATA$y);length(DATA$MUT);dim(iStates); length(Species)
dim(net$Data$y);length(net$Data$MUT);dim(iStates); length(Species)
net<-train.AMoNet(net,y=net$Data$y,MUT=net$Data$MUT, treatmt=NULL,
iStates=iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
alpha = 0, lambda = 0,
iteration=4,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL)#"Output"
plot(net$history)
#print(net$history)
plot(net,LEGEND = F, PDF = F,network = T)
net<-predict(net)
plot(net$Predict)
print(net$Predict$metrics)
x=net$Predict
Pred<-rowMeans(x$Pred_mat)
newy<-x$newy
par(mfrow=c(1,1))
par(mar=c(4,4,2,2)+0.1)
plot(Pred,newy[,1],main=main,ylab=ylab,xlab=xlab,pch=ifelse(newy[,2]==0,2,1), ...)
plot(Pred,newy[,1],main=main,ylab=ylab,xlab=xlab,pch=ifelse(newy[,2]==0,2,1))
x$metrics$Cindex
x$metrics$Cindex["concordant"]
1-round(x$metrics$Cindex["concordant"],3)
library(AMoNet)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE)
?LoadCleanTCGA()
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-LoadCleanTCGA(net, Species = Species, Param = "", RestrictUnique = T, organ = "luad")
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
#data("Default");data("Boundaries")
head(Default)
length(Default)
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 1, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 1, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Parallel = F)
plot(net,Npat=2)
#summary(net,perPatient = F,Species = NULL)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
MUT<-matrix(NA,nrow = 2,ncol = length(Species))
colnames(MUT)<-Species
rownames(MUT)<-c("Pat1","Pat2")#,"Pat3")
MUT
MUT[2,"TP53"]<-(-1)
MUT[2,"EGFR"]<-1
print(MUT[,1:10])
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net, Npat = 2)
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net, Npat = 1:2, PDF = F, ylim=c(0,1), Species = "Output", col=c(2,3))
Clin<-matrix(c(0.9,0.2),nrow = 1)
colnames(Clin)<-c("Pat1","Pat2")
rownames(Clin)<-"Output"
print(Clin)
net<-train.AMoNet(net,y=Clin,MUT=MUT,ValMut = 100,iteration=10, learning_rate=0.04, PDF=F, GIF=F, Visualize=NULL, Parallelize=F, alpha=0, Optimizer=NULL)
plot(net$history)
#dim(net$TotAttractors)
#print(net$history)
#plot(net,LEGEND = F, PDF = F)
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
par(mar=c(5, 4, 4, 2) + 0.1)
#par(mar=c(15, 4, 4, 2) + 0.1)
barplot(NETall1[NETall1$Output,"Weights"],names.arg =NETall1[NETall1$Output,1], las=2, cex.names = 0.5)
net<-predict(net)
plot(net,Npat = 2,PDF = F, ylim=c(0,1),LEGEND = F)
plot(net,Npat = c(1,2),PDF = F,LEGEND = T, ylim=c(0,1), Species = "Output", col=c(2,3))
net<-predict(net,newMUT = MUT)
plot(net,Npat = 2,PDF = F, ylim=c(0,1),LEGEND = F)
plot(net,Npat = c(1,2),PDF = F,LEGEND = T, ylim=c(0,1), Species = "Output", col=c(2,3))
?devtools::install_github
library(devtools)
?install_gitlab
install_github("https://gitlab.curie.fr/lverling/amonet.git")
install_github("https://gitlab.curie.fr/lverling/amonet")
install_github("amonet",host = "https://gitlab.curie.fr/lverling/")
devtools::install_git(
"https://gitlab.curie.fr/lverling/amonet.git",
credentials = git2r::cred_user_pass("lverling", getPass::getPass())
)
devtools::install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
vignette(amonet)
vignette(AMoNet_overview)
library(devtools)
install_git('https://lverling:Lololo.@gitlab.curie.fr/lverling/amonet.git')
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
library(AMoNet)
vignette(AMoNet_overview)
vignette("AMoNet_overview", package = "AMoNet")
vignette( package = "AMoNet")
library(AMoNet)
install.packages("C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet_0.1.0.tar.gz", repos = NULL, type="source")
library(AMoNet)
vignette(AMoNet_overview)
browseVignettes("AMoNet")
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
library(AMoNet)
browseVignettes("AMoNet")
browseVignettes("AMoNet")
devtools::build_vignette()
?build_vignette()
?build_vignettes
getwd()
build_vignettes()
install_git('https://user:password@gitlab.curie.fr/lverling/amonet.git')
library(AMoNet)
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
library(AMoNet)
browseVignettes("AMoNet")
library(AMoNet)
?install_git
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git', build_opts=c("--no-resave-data", "--no-manual"))
browseVignettes("AMoNet")
getwd()
setwd("D:/Avis/ADAPTHERAPY/scripts/")
setwd("D:/Avis/ADAPTHERAPY/scripts/")
Organ="lung|colon|brain"
OSNeeded=T
Genes=c("TP53", "EGFR")
Write=T
library(recount)
FILES<-c("GTExTCGAcode.txt", "ClinicTCGA.csv", "rse_gene_GTEx.Rdata", "rse_gene_TCGA.Rdata")
for(File in FILES){
if(!any(file.exists(paste(list.dirs(CON,recursive = T),File,sep = "/"))) ){
print(paste("I dont find file:", File,"at",CON,", can you put it?"))
}
if(length(grep("rse",File))>0){print("but I can download it after")}
}
CON=getwd()
for(File in FILES){
if(!any(file.exists(paste(list.dirs(CON,recursive = T),File,sep = "/"))) ){
print(paste("I dont find file:", File,"at",CON,", can you put it?"))
}
if(length(grep("rse",File))>0){print("but I can download it after")}
}
if(file.exists(file.path(CON, "rse_gene_GTEx.Rdata"))){
x<-load(file.path(CON,"rse_gene_GTEx.Rdata"))
rse_gene_GTEx<-get(x)
rm(x)
} else{
print("Needs to dowload the file with the download_study() function from recount")
ANS <- readline("Do you want to download it now - it maybe long and heavy [y/n]?")
if("y"%in%tolower(ANS)){
print(paste("Downloading in",CON,"directory..."))
GTEX<-recount_abstract$project[grep("gtex",tolower(recount_abstract$abstract))][2]
download_study(project = GTEX, outdir = CON,
type = "rse-gene")
print("now load it")
file.rename(file.path(CON,"rse_gene.Rdata"), "rse_gene_GTEx.Rdata")
x<-load(file.path(CON,"rse_gene_GTEx.Rdata"))
rse_gene_GTEx<-get(x)
rm(x)
} else {
print("Stop GTEX loading")
stop()
}
}
LoadPoolExpMat<-function(CON=getwd(), Organ="lung|colon|brain",
OSNeeded=T,
Genes=NULL, Write=T){
library(recount)
################
# check if files are in CON
#FILES<-c("rse_gene_TCGA.Rdata","GTExTCGAcode.txt")
FILES<-c("GTExTCGAcode.txt", "ClinicTCGA.csv", "rse_gene_GTEx.Rdata", "rse_gene_TCGA.Rdata")
for(File in FILES){
if(!any(file.exists(paste(list.dirs(CON,recursive = T),File,sep = "/"))) ){
print(paste("I dont find file:", File,"at",CON,", can you put it?"))
}
if(length(grep("rse",File))>0){print("but I can download it after")}
}
################
# start downloads
######
# GTEX
if(!OSNeeded){
print("load GTEx")
if(file.exists(file.path(CON, "rse_gene_GTEx.Rdata"))){
x<-load(file.path(CON,"rse_gene_GTEx.Rdata"))
rse_gene_GTEx<-get(x)
rm(x)
} else{
print("Needs to dowload the file with the download_study() function from recount")
ANS <- readline("Do you want to download it now - it maybe long and heavy [y/n]?")
if("y"%in%tolower(ANS)){
print(paste("Downloading in",CON,"directory..."))
GTEX<-recount_abstract$project[grep("gtex",tolower(recount_abstract$abstract))][2]
# file.path(CON,"/GTEX/")
download_study(project = GTEX, outdir = CON,
type = "rse-gene")
print("now load it")
file.rename(file.path(CON,"rse_gene.Rdata"), "rse_gene_GTEx.Rdata")
x<-load(file.path(CON,"rse_gene_GTEx.Rdata"))
rse_gene_GTEx<-get(x)
rm(x)
} else {
print("Stop GTEX loading")
stop()
}
}
# Gene names
DAT<-rowData(rse_gene_GTEx)$symbol
Gene_Names<-as.character(lapply(DAT,as.character))
rownames(rse_gene_GTEx)<-as.character(Gene_Names)
rse_gene_GTEx<-rse_gene_GTEx[!is.na(rownames(rse_gene_GTEx)),]
rse_gene_GTEx<-rse_gene_GTEx[!duplicated(rownames(rse_gene_GTEx)),]
if(!is.null(Genes)){
rse_gene_GTEx<-rse_gene_GTEx[Genes,]
}
}
######
# TCGA
print("load TCGA")
if(file.exists(file.path(CON, "rse_gene_TCGA.Rdata"))){
x<-load(file.path(CON,"rse_gene_TCGA.Rdata"))
rse_gene_GTEx<-get(x)
rm(x)
}else{
print("Needs to dowload the file with the download_study() function from recount")
ANS <- readline("Do you want to download it now - it maybe long and heavy [Y/N]?")
if("y"%in%tolower(ANS)){
print(paste("Downloading in",CON,"directory..."))
download_study(project = "TCGA", outdir = CON, type = "rse-gene")
print("now load it")
file.rename(file.path(CON,"rse_gene.Rdata"), "rse_gene_TCGA.Rdata")
x<-load(file.path(CON,"rse_gene_TCGA.Rdata"))
rse_gene_TCGA<-get(x)
rm(x)
} else {
print("Stop TCGA loading")
stop()
}
}
# Gene names
#dim(rse_gene_TCGA)
DAT<-rowData(rse_gene_TCGA)$symbol
Gene_Names<-as.character(lapply(DAT,as.character))
rownames(rse_gene_TCGA)<-as.character(Gene_Names)
# remove duplicated transcripts
rse_gene_TCGA<-rse_gene_TCGA[!is.na(rownames(rse_gene_TCGA)),]
rse_gene_TCGA<-rse_gene_TCGA[!duplicated(rownames(rse_gene_TCGA)),]
# or add, depending of how you want to consider transcripts isoforms...
if(!is.null(Genes)){
rse_gene_TCGA<-rse_gene_TCGA[Genes,]
}
rm(DAT);rm(Gene_Names)
# if using Lui clinical data
if(OSNeeded){
print("load ClinicTCGA")
rse_gene_TCGA<-rse_gene_TCGA[,!duplicated(colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])]
### clinic TCGA
ClinicTCGA<-read.csv2(paste(CON,"ClinicTCGA.csv",sep = "") )
ID<-intersect(ClinicTCGA$bcr_patient_barcode,colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])
ClinicTCGA<-ClinicTCGA[match(ID,ClinicTCGA$bcr_patient_barcode),]
rse_gene_TCGA<-rse_gene_TCGA[,match(ID,colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])]  #?
ClinicTCGA[,"RNA_ID"]<-colnames(rse_gene_TCGA)
rm(ID)
print("remove no follow up if PFI or OS")
NAS<-!(is.na(ClinicTCGA$OS.time)|is.na(ClinicTCGA$OS))
ZEROS<-ClinicTCGA$OS.time!=0
ClinicTCGA<-ClinicTCGA[NAS&ZEROS, ]
rse_gene_TCGA<-rse_gene_TCGA[,NAS&ZEROS] #
#### discard very poorly informative patients
ToDiscard<-!(ClinicTCGA$OS==0&ClinicTCGA$OS.time<median(ClinicTCGA$OS.time))
dim(ClinicTCGA[ToDiscard,]);dim(rse_gene_TCGA[,ToDiscard])
ClinicTCGA<-ClinicTCGA[ToDiscard,]
rse_gene_TCGA<-rse_gene_TCGA[,ToDiscard]
table(colnames(rse_gene_TCGA)==ClinicTCGA$RNA_ID)
print(paste("dim ClinicTCGA :",dim(ClinicTCGA)))
} else {
ClinicTCGA<-NULL
}
########################
#### process histo and organs
# conversion table
print("process histo")
GTExTCGAcode<-read.delim2(paste(CON,"GTExTCGAcode.txt",sep = ""),header = F)
GTExTCGAcode<-t(GTExTCGAcode)
colnames(GTExTCGAcode)<-GTExTCGAcode[1,]
GTExTCGAcode<-GTExTCGAcode[-1,]
# dupl in GTEx
#sort(table(GTExTCGAcode[,2]))
GTExTCGAcode[,1]<-gsub("Brain.*","Brain",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Cervix.*","Cervix",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Esophagus.*","Esophagus",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Colon.*","Colon",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Artery.*","Artery",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Adipose.*","Adipose",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Muscle.*","Muscle",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Nerve.*","Nerve",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Skin.*","Skin",GTExTCGAcode[,1])
GTExTCGAcode<-GTExTCGAcode[!duplicated(GTExTCGAcode[,1]),]
# GTEx
if(!OSNeeded){
print("GTEX organ")
#table(colData(rse_gene_TCGA_GTEx)$smtsd)
colData(rse_gene_GTEx)$Organ<-colData(rse_gene_GTEx)$smtsd
colData(rse_gene_GTEx)$Organ<-gsub("Brain.*","Brain",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Cervix.*","Cervix",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Esophagus.*","Esophagus",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Colon.*","Colon",colData(rse_gene_GTEx)$Organ)
}
# TCGA
print("TCGA organ")
#table(colData(rse_gene_TCGA)[,"xml_histological_type"])
colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"]<-gsub("TCGA-","", colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"])
# New variable in colData(rse_gene_TCGA) to match the GTEx colData(rse_gene_GTEx)$Organ
colData(rse_gene_TCGA)[,"OrganGTEx"]<-"Others"
TCGAcodes<-unique(GTExTCGAcode[,2])
TCGAcodes<-TCGAcodes[TCGAcodes!=""&!is.na(TCGAcodes)]
for(Nomenc in TCGAcodes ){
NUM<-grep(Nomenc,tolower(colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"]))
colData(rse_gene_TCGA)[NUM,"OrganGTEx"]<-as.character(GTExTCGAcode[GTExTCGAcode[,2]%in%Nomenc,1][1])
}
#sort(table(colData(rse_gene_TCGA)[,"OrganGTEx"]))
##################
## select only organ in the data
if(!is.null(Organ)){
# GTEx
if(!OSNeeded){
table(grep(tolower(Organ),tolower(colData(rse_gene_GTEx)$smtsd),value = T))
rse_gene_GTEx<-rse_gene_GTEx[,grep(tolower(Organ),tolower(colData(rse_gene_GTEx)$smtsd))]
}
# TCGA
#table(colData(rse_gene_TCGA)[,"OrganGTEx"])
#sort(table(grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"]),value = T)))
if(OSNeeded){
# to check
#  ClinicTCGA<-ClinicTCGA[ClinicTCGA$RNA_ID%in%colnames(rse_gene_TCGA),]
ClinicTCGA<-ClinicTCGA[grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"])),]
#  dim(ClinicTCGA)
}
# TCGA
rse_gene_TCGA<-rse_gene_TCGA[,grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"]))]
#table(colnames(rse_gene_TCGA)==ClinicTCGA$RNA_ID)
}
#########
### do a variable with organs in
if(!OSNeeded){
ORGANS<-c(
if(exists("rse_gene_GTEx")){
colData(rse_gene_GTEx)[,"Organ"]
},
if(exists("rse_gene_TCGA")){
colData(rse_gene_TCGA)[,"OrganGTEx"]
}
)
# table(ORGANS)
} else {
ORGANS<-NULL
}
####################
#### Pool data together
print("Pool data together")
# counts Recount
normalized<-function(x) {(x-min(x))/(max(x)-min(x))}
# GTEX
if(exists("rse_gene_GTEx")){
rse_gene_GTEx<-scale_counts(rse_gene_GTEx, targetSize = median(colSums(assays(rse_gene_GTEx)$counts)))
rse_gene_GTEx_log<-log10(assay(rse_gene_GTEx)+1)
}
# TCGA
if(exists("rse_gene_TCGA")){
rse_gene_TCGA<-scale_counts(rse_gene_TCGA, targetSize = median(colSums(assays(rse_gene_TCGA)$counts)))
rse_gene_TCGA_log<-log10(assay(rse_gene_TCGA)+1)
}
if(!OSNeeded){
# Pool...
TM<-cbind(rse_gene_GTEx_log,rse_gene_TCGA_log)
#CommonGenes<-intersect(rownames(rse_gene_TCGA_log),rownames(rse_gene_GTEx_log))
dim(TM)
} else {
TM<-rse_gene_TCGA_log
}
## normalize, or we can add a correction of batch effect here (combat f.eg)
TM<-normalized(TM)
## save
print(paste("norm expression matrix size :", paste(dim(TM),collapse = ", ")))
DATA<-list(expMat=TM, Organs=ORGANS, ClinicTCGA=ClinicTCGA)
if(Write){
NameProj<-"LoadPoolExpMat"
if(!is.null(Organ)){
NameProj<-paste(NameProj,"Organ",sep = "_")
}
if(OSNeeded){
NameProj<-paste(NameProj,"OS",sep = "_")
}
save(DATA, file = paste(CON,"/",NameProj,".RData",sep = ""))
}
##
return(DATA)
}
getwd()
DATA<-LoadPoolExpMat(CON=getwd(), Organ="lung|colon|brain", OSNeeded=T, Genes=c("TP53", "EGFR"), Write=T)

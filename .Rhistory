library(AMoNet)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(123)
data("Default");data("Boundaries")
net<-AMoNet(c("TP53","EGFR"))
print(net)
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
DATA<-LoadCleanTCGA(net, Species = Species,
Param = "", RestrictUnique = T, organ = "luad")
iStates<-RandomiStates(net,RETURN = T)
dim(DATA$y);length(DATA$MUT);dim(iStates); length(Species)
net<-train.AMoNet(net,y=DATA$y,MUT=DATA$MUT, treatmt=NULL,
iStates=iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
alpha = 0, lambda = 0,
iteration=4,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL)#"Output"
knitr::opts_chunk$set(echo = TRUE)
iStates<-RandomiStates(net,RETURN = T)
dim(iStates)
iStates
net<-RandomiStates(net,RETURN = T)
dim(DATA$y);length(DATA$MUT);dim(iStates); length(Species)
iStates<-net$iStates
dim(DATA$y);length(DATA$MUT);dim(iStates); length(Species)
net<-train.AMoNet(net,y=DATA$y,MUT=DATA$MUT, treatmt=NULL,
iStates=iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
alpha = 0, lambda = 0,
iteration=4,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL)#"Output"
plot(net$history)
#print(net$history)
plot(net,LEGEND = F, PDF = F,network = T)
net<-predict(net)
net<-predict(net)
object=net
Default
Default$Interval
net$NETall[net$ NETall$Output,]
list2env(object$Data,envir = globalenv())
iStates<-object$iStates
newy
y<-object$Data$y
dim(y)
object<-simulate(object, nsim = MinSteps, Logic = Logic, Mode = Mode,
Init = Init, iStates = iStates, MUT=MUT,treatmt = treatmt,
Parallel = Parallelize, no_cores = no_cores,
LSTM = LSTM, ValMut = ValMut)
MinSteps = Default$MinStepsForward
Parallelize
list2env(Default,envir = globalenv())
object<-simulate(object, nsim = MinSteps, Logic = Logic, Mode = Mode,
Init = Init, iStates = iStates, MUT=MUT,treatmt = treatmt,
Parallel = Parallelize, no_cores = no_cores,
LSTM = LSTM, ValMut = ValMut)
object$Parameters$Default$Interval>1
Pred_mat<-object$TotAttractors[,"A",paste("Output",seq(object$Parameters$Default),sep = ""),dim(object$TotAttractors)[4]]
dim(object$TotAttractors)
names(object$TotAttractors[1,1,,1])
Pred_mat<-object$TotAttractors[,"A",paste("Output",seq(object$Parameters$Default$Interval),sep = ""),dim(object$TotAttractors)[4]]
library(AMoNet)
knitr::opts_chunk$set(echo = TRUE)
net<-predict(net)
plot(net$Predict)
plot(net$Predict)
library(AMoNet)
devtools::check()
devtools::load_all()
?simulate()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
library(AMoNet)
devtools::check()
roxygen2::roxygenise()
?par
?legend
?plot
?sd
?rainbow
package_version(grDevices)
package_version("grDevices")
packageVersion("grDevices"")
)
packageVersion("grDevices")
packageVersion("grDevices")
packageVersion("stats")
packageVersion("graphics")
sessionInfo()
?pdf
?assign
assign(Default,object$Parameters$Default,envir = globalenv())
roxygen2::roxygenise()
library(AMoNet)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
#data("Default");data("Boundaries")
head(Default)
net<-AMoNet(c("TP53","EGFR"))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "MyAMoNet")
library(AMoNet)
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "MyAMoNet")
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
#data("Default");data("Boundaries")
head(Default)
net<-AMoNet(c("TP53","EGFR"))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "MyAMoNet")
plot(net, network = T)
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Parallel = F)
plot(net,Npat=2)
#summary(net,perPatient = F,Species = NULL)
# prepare mutations data
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
MUT<-matrix(NA,nrow = 2,ncol = length(Species))
colnames(MUT)<-Species
rownames(MUT)<-c("Pat1","Pat2")#,"Pat3")
# mutate it
# to ways: either descrete ("non NA") or numeric. Numeric is prefered.
if(FALSE){
MUT[2,"TP53"]<-"mut"
MUT[2,"EGFR"]<-"mut"
} else{ # or
MUT[2,"TP53"]<-(-1)
MUT[2,"EGFR"]<-1
}
print(MUT[,1:10])
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net,Npat = 1:2,PDF = F, ylim=c(0,1), Species = "Output", col=c(2,3))
Clin<-matrix(c(0.9,0.2),nrow = 1)
colnames(Clin)<-c("Pat1","Pat2")
rownames(Clin)<-"Output"
print(Clin)
net<-train.AMoNet(net,y=Clin,MUT=MUT,ValMut = 100,iteration=10, learning_rate=0.04, PDF=F, GIF=F, Visualize=NULL, Parallelize=F, alpha=0, Optimizer=NULL)
plot(net$history)
#dim(net$TotAttractors)
#print(net$history)
#plot(net,LEGEND = F, PDF = F)
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
par(mar=c(5, 4, 4, 2) + 0.1)
#par(mar=c(15, 4, 4, 2) + 0.1)
barplot(NETall1[NETall1$Output,"Weights"],names.arg =NETall1[NETall1$Output,1], las=2, cex.names = 0.5)
net<-predict(net)
plot(net,Npat = 2,PDF = F, ylim=c(0,1),LEGEND = F)
plot(net,Npat = c(1,2),PDF = F,LEGEND = T, ylim=c(0,1), Species = "Output", col=c(2,3))
print("end")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(AMoNet)
devtools::check()
Default$Interval
library(pryr)
where(Default)
where("Default")
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(AMoNet)
library(pryr)
where("Default")
Default$Interval
assign("Default$Interval",1,envir = "package:AMoNet")
?assign
assign("Default$Interval",1,envir = package:AMoNet)
assign("Default$Interval",1,envir = AMoNet)
search
search()
assign("Default$Interval",1,envir = package:AMoNet)
assign("Default$Interval",1,envir = "AMoNet")
globalenv()
library(AMoNet)
AMoNet::Default$Interval
AMoNet::Default$Interval<-1
AMoNet:::Default$Interval<-1
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-AMoNet(c("TP53","EGFR"))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "MyAMoNet")
devtools::check()
roxygen2::roxygenise()
library(AMoNet)
?AMoNet
roxygen2::roxygenise()
library(AMoNet)
?AMoNet
roxygen2::roxygenise()
Default$LearningRateDecay
Boundaries$LearningRateDecay
?build.AMoNet()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
object=net
library(AMoNet)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-AMoNet(c("TP53","EGFR"))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Parallel = F)
# prepare mutations data
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
MUT<-matrix(NA,nrow = 2,ncol = length(Species))
colnames(MUT)<-Species
rownames(MUT)<-c("Pat1","Pat2")#,"Pat3")
# mutate it
# to ways: either descrete ("non NA") or numeric. Numeric is prefered.
if(FALSE){
MUT[2,"TP53"]<-"mut"
MUT[2,"EGFR"]<-"mut"
} else{ # or
MUT[2,"TP53"]<-(-1)
MUT[2,"EGFR"]<-1
}
print(MUT[,1:10])
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net,Npat = 1:2,PDF = F, ylim=c(0,1), Species = "Output", col=c(2,3))
Clin<-matrix(c(0.9,0.2),nrow = 1)
colnames(Clin)<-c("Pat1","Pat2")
rownames(Clin)<-"Output"
print(Clin)
net<-train.AMoNet(net,y=Clin,MUT=MUT,ValMut = 100,iteration=10, learning_rate=0.04, PDF=F, GIF=F, Visualize=NULL, Parallelize=F, alpha=0, Optimizer=NULL)
plot(net$history)
class(net$history)
plot(net$history)
library(AMoNet)
plot(net$history)
#dim(net$TotAttractors)
#print(net$history)
#plot(net,LEGEND = F, PDF = F)
names(net$Data)
print(net$Data)
library(AMoNet)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-AMoNet(c("TP53","EGFR"))
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
DATA<-LoadCleanTCGA(net, Species = Species,
Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net,RETURN = T)
net$iStates
net<-LoadCleanTCGA(net, Species = Species,
Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net, RETURN = T)
iStates<-net$iStates
dim(DATA$y);length(DATA$MUT);dim(iStates); length(Species)
dim(net$Data$y);length(net$Data$MUT);dim(iStates); length(Species)
net<-train.AMoNet(net,y=net$Data$y,MUT=net$Data$MUT, treatmt=NULL,
iStates=iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
alpha = 0, lambda = 0,
iteration=4,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL)#"Output"
plot(net$history)
#print(net$history)
plot(net,LEGEND = F, PDF = F,network = T)
net<-predict(net)
plot(net$Predict)
print(net$Predict$metrics)
x=net$Predict
Pred<-rowMeans(x$Pred_mat)
newy<-x$newy
par(mfrow=c(1,1))
par(mar=c(4,4,2,2)+0.1)
plot(Pred,newy[,1],main=main,ylab=ylab,xlab=xlab,pch=ifelse(newy[,2]==0,2,1), ...)
plot(Pred,newy[,1],main=main,ylab=ylab,xlab=xlab,pch=ifelse(newy[,2]==0,2,1))
x$metrics$Cindex
x$metrics$Cindex["concordant"]
1-round(x$metrics$Cindex["concordant"],3)
library(AMoNet)
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE)
?LoadCleanTCGA()
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-LoadCleanTCGA(net, Species = Species, Param = "", RestrictUnique = T, organ = "luad")
#install.packages("AMoNet", dependencies=T)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
#data("Default");data("Boundaries")
head(Default)
length(Default)
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 1, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 1, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
plot(net, network = T)
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Parallel = F)
plot(net,Npat=2)
#summary(net,perPatient = F,Species = NULL)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
MUT<-matrix(NA,nrow = 2,ncol = length(Species))
colnames(MUT)<-Species
rownames(MUT)<-c("Pat1","Pat2")#,"Pat3")
MUT
MUT[2,"TP53"]<-(-1)
MUT[2,"EGFR"]<-1
print(MUT[,1:10])
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net, Npat = 2)
net<-simulate(net, nsim = 10, Logic = "Sigmoid", Mode = "LAYER", MUT=MUT, ValMut = 100, Parallel = F)
plot(net, Npat = 2, ylim=c(0,1))
plot(net, Npat = 1:2, PDF = F, ylim=c(0,1), Species = "Output", col=c(2,3))
Clin<-matrix(c(0.9,0.2),nrow = 1)
colnames(Clin)<-c("Pat1","Pat2")
rownames(Clin)<-"Output"
print(Clin)
net<-train.AMoNet(net,y=Clin,MUT=MUT,ValMut = 100,iteration=10, learning_rate=0.04, PDF=F, GIF=F, Visualize=NULL, Parallelize=F, alpha=0, Optimizer=NULL)
plot(net$history)
#dim(net$TotAttractors)
#print(net$history)
#plot(net,LEGEND = F, PDF = F)
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
par(mar=c(5, 4, 4, 2) + 0.1)
#par(mar=c(15, 4, 4, 2) + 0.1)
barplot(NETall1[NETall1$Output,"Weights"],names.arg =NETall1[NETall1$Output,1], las=2, cex.names = 0.5)
net<-predict(net)
plot(net,Npat = 2,PDF = F, ylim=c(0,1),LEGEND = F)
plot(net,Npat = c(1,2),PDF = F,LEGEND = T, ylim=c(0,1), Species = "Output", col=c(2,3))
net<-predict(net,newMUT = MUT)
plot(net,Npat = 2,PDF = F, ylim=c(0,1),LEGEND = F)
plot(net,Npat = c(1,2),PDF = F,LEGEND = T, ylim=c(0,1), Species = "Output", col=c(2,3))
?devtools::install_github
library(devtools)
?install_gitlab
install_github("https://gitlab.curie.fr/lverling/amonet.git")
install_github("https://gitlab.curie.fr/lverling/amonet")
install_github("amonet",host = "https://gitlab.curie.fr/lverling/")
devtools::install_git(
"https://gitlab.curie.fr/lverling/amonet.git",
credentials = git2r::cred_user_pass("lverling", getPass::getPass())
)
devtools::install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
vignette(amonet)
vignette(AMoNet_overview)

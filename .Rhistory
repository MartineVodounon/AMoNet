print("Stop TCGA loading")
stop()
}
}
# Gene names
#dim(rse_gene_TCGA)
DAT<-rowData(rse_gene_TCGA)$symbol
Gene_Names<-as.character(lapply(DAT,as.character))
rownames(rse_gene_TCGA)<-as.character(Gene_Names)
# remove duplicated transcripts
rse_gene_TCGA<-rse_gene_TCGA[!is.na(rownames(rse_gene_TCGA)),]
rse_gene_TCGA<-rse_gene_TCGA[!duplicated(rownames(rse_gene_TCGA)),]
# or add, depending of how you want to consider transcripts isoforms...
if(!is.null(Genes)){
rse_gene_TCGA<-rse_gene_TCGA[Genes,]
}
rm(DAT);rm(Gene_Names)
# if using Lui clinical data
if(OSNeeded){
print("load ClinicTCGA")
rse_gene_TCGA<-rse_gene_TCGA[,!duplicated(colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])]
### clinic TCGA
ClinicTCGA<-read.csv2(paste(CON,"ClinicTCGA.csv",sep = "") )
ID<-intersect(ClinicTCGA$bcr_patient_barcode,colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])
ClinicTCGA<-ClinicTCGA[match(ID,ClinicTCGA$bcr_patient_barcode),]
rse_gene_TCGA<-rse_gene_TCGA[,match(ID,colData(rse_gene_TCGA)[,"xml_bcr_patient_barcode"])]  #?
ClinicTCGA[,"RNA_ID"]<-colnames(rse_gene_TCGA)
rm(ID)
print("remove no follow up if PFI or OS")
NAS<-!(is.na(ClinicTCGA$OS.time)|is.na(ClinicTCGA$OS))
ZEROS<-ClinicTCGA$OS.time!=0
ClinicTCGA<-ClinicTCGA[NAS&ZEROS, ]
rse_gene_TCGA<-rse_gene_TCGA[,NAS&ZEROS] #
#### discard very poorly informative patients
ToDiscard<-!(ClinicTCGA$OS==0&ClinicTCGA$OS.time<median(ClinicTCGA$OS.time))
dim(ClinicTCGA[ToDiscard,]);dim(rse_gene_TCGA[,ToDiscard])
ClinicTCGA<-ClinicTCGA[ToDiscard,]
rse_gene_TCGA<-rse_gene_TCGA[,ToDiscard]
table(colnames(rse_gene_TCGA)==ClinicTCGA$RNA_ID)
print(paste("dim ClinicTCGA :",dim(ClinicTCGA)))
} else {
ClinicTCGA<-NULL
}
########################
#### process histo and organs
# conversion table
print("process histo")
GTExTCGAcode<-read.delim2(paste(CON,"GTExTCGAcode.txt",sep = ""),header = F)
GTExTCGAcode<-t(GTExTCGAcode)
colnames(GTExTCGAcode)<-GTExTCGAcode[1,]
GTExTCGAcode<-GTExTCGAcode[-1,]
# dupl in GTEx
#sort(table(GTExTCGAcode[,2]))
GTExTCGAcode[,1]<-gsub("Brain.*","Brain",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Cervix.*","Cervix",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Esophagus.*","Esophagus",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Colon.*","Colon",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Artery.*","Artery",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Adipose.*","Adipose",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Muscle.*","Muscle",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Nerve.*","Nerve",GTExTCGAcode[,1])
GTExTCGAcode[,1]<-gsub("Skin.*","Skin",GTExTCGAcode[,1])
GTExTCGAcode<-GTExTCGAcode[!duplicated(GTExTCGAcode[,1]),]
# GTEx
if(!OSNeeded){
print("GTEX organ")
#table(colData(rse_gene_TCGA_GTEx)$smtsd)
colData(rse_gene_GTEx)$Organ<-colData(rse_gene_GTEx)$smtsd
colData(rse_gene_GTEx)$Organ<-gsub("Brain.*","Brain",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Cervix.*","Cervix",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Esophagus.*","Esophagus",colData(rse_gene_GTEx)$Organ)
colData(rse_gene_GTEx)$Organ<-gsub("Colon.*","Colon",colData(rse_gene_GTEx)$Organ)
}
# TCGA
print("TCGA organ")
#table(colData(rse_gene_TCGA)[,"xml_histological_type"])
colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"]<-gsub("TCGA-","", colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"])
# New variable in colData(rse_gene_TCGA) to match the GTEx colData(rse_gene_GTEx)$Organ
colData(rse_gene_TCGA)[,"OrganGTEx"]<-"Others"
TCGAcodes<-unique(GTExTCGAcode[,2])
TCGAcodes<-TCGAcodes[TCGAcodes!=""&!is.na(TCGAcodes)]
for(Nomenc in TCGAcodes ){
NUM<-grep(Nomenc,tolower(colData(rse_gene_TCGA)[,"gdc_cases.project.project_id"]))
colData(rse_gene_TCGA)[NUM,"OrganGTEx"]<-as.character(GTExTCGAcode[GTExTCGAcode[,2]%in%Nomenc,1][1])
}
#sort(table(colData(rse_gene_TCGA)[,"OrganGTEx"]))
##################
## select only organ in the data
if(!is.null(Organ)){
# GTEx
if(!OSNeeded){
table(grep(tolower(Organ),tolower(colData(rse_gene_GTEx)$smtsd),value = T))
rse_gene_GTEx<-rse_gene_GTEx[,grep(tolower(Organ),tolower(colData(rse_gene_GTEx)$smtsd))]
}
# TCGA
#table(colData(rse_gene_TCGA)[,"OrganGTEx"])
#sort(table(grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"]),value = T)))
if(OSNeeded){
# to check
#  ClinicTCGA<-ClinicTCGA[ClinicTCGA$RNA_ID%in%colnames(rse_gene_TCGA),]
ClinicTCGA<-ClinicTCGA[grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"])),]
#  dim(ClinicTCGA)
}
# TCGA
rse_gene_TCGA<-rse_gene_TCGA[,grep(tolower(Organ),tolower(colData(rse_gene_TCGA)[,"OrganGTEx"]))]
#table(colnames(rse_gene_TCGA)==ClinicTCGA$RNA_ID)
}
#########
### do a variable with organs in
if(!OSNeeded){
ORGANS<-c(
if(exists("rse_gene_GTEx")){
colData(rse_gene_GTEx)[,"Organ"]
},
if(exists("rse_gene_TCGA")){
colData(rse_gene_TCGA)[,"OrganGTEx"]
}
)
# table(ORGANS)
} else {
ORGANS<-NULL
}
####################
#### Pool data together
print("Pool data together")
# counts Recount
normalized<-function(x) {(x-min(x))/(max(x)-min(x))}
# GTEX
if(exists("rse_gene_GTEx")){
rse_gene_GTEx<-scale_counts(rse_gene_GTEx, targetSize = median(colSums(assays(rse_gene_GTEx)$counts)))
rse_gene_GTEx_log<-log10(assay(rse_gene_GTEx)+1)
}
# TCGA
if(exists("rse_gene_TCGA")){
rse_gene_TCGA<-scale_counts(rse_gene_TCGA, targetSize = median(colSums(assays(rse_gene_TCGA)$counts)))
rse_gene_TCGA_log<-log10(assay(rse_gene_TCGA)+1)
}
if(!OSNeeded){
# Pool...
TM<-cbind(rse_gene_GTEx_log,rse_gene_TCGA_log)
#CommonGenes<-intersect(rownames(rse_gene_TCGA_log),rownames(rse_gene_GTEx_log))
dim(TM)
} else {
TM<-rse_gene_TCGA_log
}
## normalize, or we can add a correction of batch effect here (combat f.eg)
TM<-normalized(TM)
## save
print(paste("norm expression matrix size :", paste(dim(TM),collapse = ", ")))
DATA<-list(expMat=TM, Organs=ORGANS, ClinicTCGA=ClinicTCGA)
if(Write){
NameProj<-"LoadPoolExpMat"
if(!is.null(Organ)){
NameProj<-paste(NameProj,"Organ",sep = "_")
}
if(OSNeeded){
NameProj<-paste(NameProj,"OS",sep = "_")
}
save(DATA, file = paste(CON,"/",NameProj,".RData",sep = ""))
}
##
return(DATA)
}
getwd()
DATA<-LoadPoolExpMat(CON=getwd(), Organ="lung|colon|brain", OSNeeded=T, Genes=c("TP53", "EGFR"), Write=T)
knitr::opts_chunk$set(echo = TRUE)
library(AMoNet)
if(FALSE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
data("Default");data("Boundaries")
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
net$NETall$Output
table(net$NETall$interaction_directed_signed)
net$NETall[1:3,1:3]
library(AMoNet)
library(AMoNet)
library(AMoNet)
knitr::opts_chunk$set(echo = TRUE)
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet TCGA")
plot(net, network = T)
library(AMoNet)
roxygen2::roxygenise()
library(AMoNet)
?write
?save
object=net
library(AMoNet)
roxygen2::roxygenise()
library(AMoNet)
roxygen2::roxygenise()
library(AMoNet)
object$Parameters$Default$Optimizer
roxygen2::roxygenise()
install.packages("reshape2")
library(devtools)
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git')
library(AMoNet)
head(Default)
net<-AMoNet(c("TP53","EGFR"))
#print(names(net))
net<-build.AMoNet(net, InteractionBase = OMNI, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.01, SdWinit = 0.01, Phenotypes = GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 1, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 1, NameProj = "MyAMoNet")
?install_git
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git', dependencies = TRUE)
roxygen2::roxygenise()
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git',
dependencies = TRUE, build_opts="--yes-build-vignettes")
install_git('https://lverling:Lololo.1@gitlab.curie.fr/lverling/amonet.git',
dependencies = TRUE, build_opts="-build-vignettes")
library(AMoNet)
warnings()
library(AMoNet)
devtools::load_all()
devtools::check()
library(AMoNet)
library(AMoNet)
if(TRUE){
print("Loading packages")
library(reshape2)
library(parallel)
library(stringr)
library(splines)
library(cgdsr)
library(survival)
library(magick)
library(matrixStats)
library(survivalROC)
library(pec)
}
set.seed(1234)
net<-AMoNet(c("TP53","EGFR"))
net<-build.AMoNet(net, nblayers = 2, MinConnect = 4, RestrictedBuilding = T, MeanWinit = 0.1, SdWinit = 0.1, Phenotypes=GenesSelecHall, MECA=names_MECA, RestrictedBase = T, Interval = 10, Optimizer = "Adam", KeepPhenotypes=T, no_cores = 3, NameProj = "AMoNet_TCGA")
net<-prebuilt.AMoNet(net, NETall=NULL, MeanWinit = 0.1, SdWinit = 0.1, LSTM=F, Optimizer = Default$Optimizer, Outputs="Output", NameProj="AMoNet_TCGA")
plot(net, network = T)
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
net<-LoadCleanTCGA(net, Species = Species, Param = "", RestrictUnique = T, organ = "luad")
net<-RandomiStates(net, RETURN = T)
iStates<-net$iStates
dim(net$Data$y);length(net$Data$MUT);dim(iStates); length(Species)
net<-train.AMoNet(net,y=net$Data$y,MUT=net$Data$MUT, treatmt=NULL,
iStates=iStates, Init = NULL,
ValMut = 100, Ct=NULL,
MiniBatch=16,
iteration=1,
Optimizer="Momentum",
beta1=0.9, beta2=0.999,
alpha = 0, lambda = 0,
Parallelize= T, no_cores = 2,
learning_rate=0.01,
LearningRateDecay = NULL,
adaptive_iStates= T,
Logic = "Sigmoid", Mode = "LAYER", ModeBack = "LAYER",
MinStepsForward = 6,
MinStepsBackward = 1,
gradClipping=NULL,
LSTM=FALSE,
FixNodes = NULL,
PDF=F, GIF=F, Visualize=NULL) #"Output"
plot(net$history)
plot(net,LEGEND = F, PDF = F,network = T)
net<-predict(net)
plot(net$Predict)
plot(net, Npat = 3)
plot(net, Npat = 2, ylim=c(0,1))
plot(net, Npat = 10, ylim=c(0,1))
plot(net, Npat = 11, ylim=c(0,1))
plot(net, Npat = 10, ylim=c(0,1))
net$Data$MUTa
packageVersion(MASS)
packageVersion("MASS")
packageVersion("circlize")
packageVersion("rgl")
object=net
Param=c("nblayers", "MinConnect")
getwd()
DIR=file.path(getwd(),"model")
DIR
NameProj="HallmarksLungHN"
GENESman=c("EGFR", "KRAS", "TP53", "MTOR")
treatmt=""
SelectMECA="HALLMARK"
organ="luad"
eSS=F
NewNet=T
no_cores=3
KeepData=T
PartitionSplit=0.7
library(AMoNet)
package_version("rgl")
package_version(rgl)
package_version("rgl")
library(AMoNet)
package_version(MASS)
package_version("MASS")
library(MASS)
package_version("MASS")
package_version(MASS)
packageVersion(MASS)
packageVersion("MASS")
packageVersion("circliez")
packageVersion("circlize")
packageVersion("rgl")
library(AMoNet)
NameProjbase<-NameProj
CLnames<-match.call()
CLnames
GenesSelec<-rbind(AMoNet::GenesSelecImmuno,AMoNet::GenesSelecHall)
AMoNet::GenesSelecHall
GenesSelec<-rbind(AMoNet::GenesSelecImmuno,AMoNet::GenesSelecHall)
class(AMoNet::GenesSelectImmuno)
rbind(AMoNet::GenesSelectImmuno, AMoNet::GenesSelecHall)
GenesSelec<-rbind(AMoNet::GenesSelectImmuno, AMoNet::GenesSelecHall)
MECA<-unique(GenesSelec$target_hgnc) # do an interactcive function to choose MECA
if(!is.null("SelectMECA")){
MECA<-grep(SelectMECA,MECA,value = T)
}
if("all"%in%tolower(GENESman)){
GENESman<-unique(GenesSelec$source_hgnc[GenesSelec$target_hgnc%in%MECA])
}
DIR<-"C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/ArtMolNet/results/Hallmarks/"
DIR=file.path(getwd(),"model")
FILES<-list.files(DIR,pattern = NameProjbase)
FILES
is.null(NETall)
NETall = NULL
COSTS<-list()
FILES<-list.files(DIR, pattern = NameProjbase)
print(FILES)
COST<-lapply(FILES,function(f){
load(paste(DIR,f,sep = ""))
if(ValSelect){
if("Cindex"%in%names(NETallProp)){
print("Select on validation C-index")
COSTsim<-as.numeric(1-NETallProp$Cindex["Val"])
} else {
print("Select on validation Cost")
COSTsim<-NETallProp$CostVal
}
} else {
if("Cindex"%in%names(NETallProp)){
print("Select on training C-index")
COSTsim<-as.numeric(1-NETallProp$Cindex["Train"])
# } else if(!is.null(MiniBatch)){
#   MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
#    if(MNB==0){MNB=10}
#    COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
} else {
print("Select on training Cost")
if(!is.null(MiniBatch)){
MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
if(MNB==0){MNB=1}
COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
} else {
# last train cost
COSTsim<-tail(as.numeric(unlist(NETallProp$Cost)),1)
}
}
}
return(COSTsim)
})
f=FILES[1]
load(paste(DIR,f,sep = ""))
f
file.path(DIR,f)
load(file.path(DIR,f))
ValSelect
ValSelect=T
names(NETallProp)
print("Select on validation C-index")
COSTsim<-as.numeric(1-NETallProp$Cindex["Val"])
COSTsim
NETallProp$CostVal
as.numeric(1-NETallProp$Cindex["Train"])
MiniBatch
addOutputs=Default$Interval
MiniBatch=Default$MiniBatch
Default$MiniBatch
MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
MNB
if(MNB==0){MNB=1}
COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
COSTsim
COSTsim<-as.numeric(1-NETallProp$Cindex["Val"])
COST<-lapply(FILES,function(f){
load(file.path(DIR,f))
if(ValSelect){
if("Cindex"%in%names(NETallProp)){
print("Select on validation C-index")
COSTsim<-as.numeric(1-NETallProp$Cindex["Val"])
} else {
print("Select on validation Cost")
COSTsim<-NETallProp$CostVal
}
} else {
if("Cindex"%in%names(NETallProp)){
print("Select on training C-index")
COSTsim<-as.numeric(1-NETallProp$Cindex["Train"])
# } else if(!is.null(MiniBatch)){
#   MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
#    if(MNB==0){MNB=10}
#    COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
} else {
print("Select on training Cost")
#  if(!is.null(Default$MiniBatch)){
MNB<-round(length(unlist(NETallProp$TrainSplit$Train))/NETallProp$Parameters$Default$MiniBatch)
if(MNB==0){MNB=1}
COSTsim<-median(as.numeric(tail(unlist(NETallProp$Cost),MNB)))
#  } else {
# last train cost
#    COSTsim<-tail(as.numeric(unlist(NETallProp$Cost)),1)
#  }
}
}
return(COSTsim)
})
names(COST)<-FILES
COST<-unlist(COST)
COST
BESTone<-names(which(COST==min(COST)))[1]
BESTone
print(paste("Best AMoNet is :", gsub(".Rdata","",BESTone) ))
load(paste(DIR,BESTone,sep = ""))
load(file.path(DIR,BESTone))
NETallpre<-NETallProp$NETallList[[length(NETallProp$NETallList)]]
NETall<-PlotOptNet(NETall = NETallpre,PDF = F,Optimized = T,
NameProj = paste(NameProjbase,"\nmin cost=", round(min(COST),4) ) ,
PrintOptNET = T)
net<-AMoNet(GENESman = GENESman, treatmt = treatmt)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
Param
HyperP(C = Param, Default = Default, Boundaries = Boundaries)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
library(AMoNet)
HyperP(C = Param, Default = Default, Boundaries = Boundaries)
library(AMoNet)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
roxygen2::roxygenise()
library(AMoNet)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
roxygen2::roxygenise()
library(AMoNet)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
library(AMoNet)
Default<-HyperP(C=Param,Default = Default,Boundaries = Boundaries)
Boundaries
Default<-HyperP(C=Param,Default = Default, Boundaries = Boundaries)
roxygen2::roxygenise()
library(AMoNet)
Default<-HyperP(C=Param,Default = Default, Boundaries = Boundaries)
roxygen2::roxygenise()
library(AMoNet)
Default<-HyperP(C=Param,Default = Default, Boundaries = Boundaries)
HyperP<-function(C=C, Default=Default, Boundaries=Boundaries){
# define distribution you want
LogDistrib<-function(min,max,N){
sample(exp(seq(log(abs(min)),log(abs(max)),length.out = 100)),N)
}
NormDistrib<-function(min,max,N){
sample(seq(min,max,length.out = 100),N)
}
for(Cp in C){
if(is.numeric(Bondaries[[Cp]])){
if(is.integer(Bondaries[[Cp]])){
Default[[Cp]]<- sample(seq(Bondaries[[Cp]][1],Bondaries[[Cp]][2]),1)
} else if(all(Bondaries[[Cp]]>=0.1)){
Default[[Cp]]<- NormDistrib(min = Bondaries[[Cp]][1],max = Bondaries[[Cp]][2], N = 1)
}else{
Default[[Cp]]<- LogDistrib(min = Bondaries[[Cp]][1],max = Bondaries[[Cp]][2], N = 1)
}
} else if(is.character(Bondaries[[Cp]])|is.logical(Bondaries[[Cp]])){
Default[[Cp]]<- sample(Bondaries[[Cp]],1)
}
}
if("MiniBatch"%in%C){
Default$MiniBatch<-sample(2^seq(Bondaries$MiniBatch[1],Bondaries$MiniBatch[2]),1)
}
list2env(Default, envir = .GlobalEnv)
return(Default)
}
Default<-HyperP(C=Param,Default = Default, Boundaries = Boundaries)
roxygen2::roxygenise()
library(AMoNet)
Default<-HyperP(C=Param,Default = Default, Boundaries = Boundaries)

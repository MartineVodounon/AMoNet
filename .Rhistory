# change with preBuild function
# update Hyperparameters with new ones
x<-load(file.path(DIR,FILES))
net<-get(x)
net$Parameters$Default<-HyperP(C=Param, Default = net$Parameters$Default,
Boundaries = net$Parameters$Boundaries)
} else { # this is used for the first net building
# update Hyperparameters with new ones
net$Parameters$Default<-HyperP(C=Param,Default = net$Parameters$Default,
Boundaries = net$Parameters$Boundaries)
net<-build.AMoNet(object = net,
InteractionBase = OMNI,
nblayers = net$Parameters$Default$nblayers,
MinConnect = net$Parameters$Default$MinConnect,
RestrictedBuilding = T, RestrictedBase = T, FilterCGS = T,
MeanWinit = net$Parameters$Default$MeanWinit,
SdWinit = net$Parameters$Default$SdWinit,
Phenotypes=GenesSelec, MECA=MECA,
Interval = net$Parameters$Default$Interval,
LSTM = net$Parameters$Default$LSTM,
Optimizer = net$Parameters$Default$Optimizer,
KeepPhenotypes=T, no_cores = net$Parameters$Default$no_cores,
NameProj = NameProjbase)
}
Species<-union(net$NETall$source_hgnc,net$NETall$target_hgnc)
print("load TCGA data")
net<-LoadCleanTCGA(net, Species = Species,
Param = Param, RestrictUnique = F, organ = organ)
QUANTS<-unlist(sapply(Param,function(PR){
PARAM<-eval(parse(text=PR) ,envir = Default)
NAME<-paste(PR,ifelse(is.na(as.numeric(PARAM)),PARAM,as.numeric(PARAM)),sep = "_") #round(as.numeric(PARAM),4)
return(NAME)
}))
net$call$NameProj<-paste(NameProjbase, paste(QUANTS,collapse = "_"),"_", sep = "")
NameProj<-net$call$NameProj
print(paste("Welcome to project", NameProj))
net<-RandomiStates(net)
if(net$Parameters$Default$EXPinit){
for(i in colnames(y)){
net$iStates[i,colnames(net$Data$Init)]<-as.numeric(net$Data$Init[i,]) # match the col order
}
}
if(net$Parameters$Default$LSTM){ # to check if doesnt impare LSTM
Ct<-t(replicate(ncol(y), rep(1,length(Species)) , simplify = TRUE))
colnames(Ct)<-Species
rownames(Ct)<-colnames(y)
} else{
Ct=NULL
}
print("run learning")
if(net$Parameters$Default$FixWeights){
FixNodes<-Species[!Species%in%c(net$NETall$source_hgnc[net$NETall$target_hgnc%in%"Output"],"Output")]
} else {
FixNodes<-NULL
}
if(!"TrainSplit"%in%names(net)){
net<-split(net,PartitionSplit)
#list2env(net$TrainSplit, envir = globalenv())
} else {
#list2env(net$TrainSplit, envir = globalenv())
net$TrainSplit$Train<-net$TrainSplit$Train[net$TrainSplit$Train%in%colnames(net$Data$y)]
net$TrainSplit$Val<-net$TrainSplit$Val[net$TrainSplit$Val%in%colnames(net$Data$y)]
MorePat<-colnames(net$Data$y)[!colnames(net$Data$y)%in%c(net$TrainSplit$Train,net$TrainSplit$Val)]
if(length(MorePat)>0){
MPTrain<-sample(MorePat,size = round(length(MorePat)*PartitionSplit))
MPVal<-MorePat[!MorePat%in%MPTrain]
net$TrainSplit$Train<-c(net$TrainSplit$Train,MPTrain)
net$TrainSplit$Val<-c(net$TrainSplit$Val,MPVal)
#      net$TrainSplit$Train<<-Train
#      net$TrainSplit$Val<<-Val
}
}
net$Parameters$Default$MiniBatch<-min(net$Parameters$Default$MiniBatch,length(net$TrainSplit$Train))
if(net$Parameters$Default$MiniBatch==length(net$TrainSplit$Train)){net$Parameters$Default$Optimizer=NULL}
print(paste("Training on", length(net$TrainSplit$Train),"; validation on",length(net$TrainSplit$Val), "patients"))
cl <- parallel::makeCluster(no_cores)
Quant=3
no_cores
parallel::clusterExport(cl,c("net","Init", "MUT", "iStates", "y","treatmt", "predict.AMoNet","simulate.AMoNet"),
envir = environment())
net1<-ess(net, Quant=3, y= net$Data$y[,net$TrainSplit$Train,drop=F],
MUT= net$Data$MUT[net$TrainSplit$Train],
Init = net$Data$Init[,net$TrainSplit$Train],
iStates= net$iStates[net$TrainSplit$Train,],
treatmt=NULL,
no_cores=net$Parameters$Default$no_cores) # CGS, NETall1, Default,ValMut = net$Parameters$Default$ValMut,FixNodes=FixNodes, Plot=F
net1$NETall
Latt<-length(list.files(DIR, pattern =  NameProj))
if(Latt>0){
CHAR<-as.numeric(gsub(".*_","", gsub(".Rdata","", gsub(NameProj ,"", list.files(DIR, pattern =  NameProj)))))
Latt<-max(CHAR[nchar(CHAR)<=2],na.rm = T)
}
print("save")
DIRSave<-paste(DIR,"/", NameProj, Latt+1,".Rdata",sep = "") # keep it for saving validation
net$DIRSave<-DIRSave
save(net, file = DIRSave)
if(net$call$train_call$iteration>1){
plot(net$history)
}
net$call$train_call
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
NETall1
net$history[["NETallList"]]
net$history[["NETallList"]]<-net$NETall
net$history[["NETallActivity"]]<-NULL # to check
net$history[["Cost"]]<-Res
net$call$train_call<-list(Optimizer="eSS", iteration=1)
if(net$call$train_call$iteration>1){
plot(net$history)
}
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
barplot(NETall1[NETall1$Output,"Weights"],names.arg =NETall1[NETall1$Output,1], las=2, cex.names = 0.5)
NETall1
length(net$history$NETallList)
net$history[["NETallList"]]<-list(net$NETall)
NETall1<-net$history$NETallList[[length(net$history$NETallList)]]
barplot(NETall1[NETall1$Output,"Weights"],names.arg =NETall1[NETall1$Output,1], las=2, cex.names = 0.5)
net<-predict(net, SplitType = "Train")
plot(net$Predict_Train, xlim=c(0,1))
net<-predict(net, SplitType = "Val")
plot(net$Predict_Val, xlim=c(0,1))
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
rm(list = ls())
DirWrapperGS<-system.file('R/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('R/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
# Print RunTCGAopt() arguments or check documentation
print("RunTCGAopt function arguments:")
print(names(formals(RunTCGAopt)))
?RunTCGAopt
# Print names of hyper-parameters
print("Names of hyper-parameters :")
print(names(Default))
?Default
args<-"--Param MinConnect nblayers --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --lambda 0.01 --iteration 10 --learningrate 0.001 --NewNet T --eSS T"
# set the number of training trials
Ntrials<-3
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
hh <- paste(unlist(args),collapse=' ')
listoptions <- unlist(strsplit(hh,'--'))[-1]
options.args <- sapply(listoptions,function(x){
unlist(strsplit(x, ' '))[-1]
})
options.names <- sapply(listoptions,function(x){
option <-  unlist(strsplit(x, ' '))[1]
})
names(options.args) <- unlist(options.names)
#Correct<-options.args[[3]]
options.args<-lapply(options.args,function(Correct){
if(!is.na(as.numeric(Correct))){
return(as.numeric(Correct))
} else if(exists(Correct)){
return(eval(parse(text = Correct)))
} else {
return(Correct)
}
})
print("options are:")
print(options.args)
if(exists("options.args")){
list2env(options.args,globalenv())
}
NameProjbase<-NameProj
DIR<-getwd()
options.args
if(length(grep("/model",DIR))==0){
DIR<-file.path(DIR,"model/")
if(length(list.files(DIR))==0){
print("Set DIR to root/ or model/")
}
}
dirData<-DIR
dirPlot<-gsub("/model","/tmp",DIR)
bterms<-list()
Weights<-list()
FILES<-list.files(dirData,pattern = paste("^",NameProjbase, sep = ""))
COSTS<-list()
FILES
COST<-lapply(FILES,function(f){
x<-load(file.path(dirData,f))
net<-get(x)
COSTsim<-as.numeric(unlist(net$history$Cost))
MNB<-round(length(unlist(net$TrainSplit$Train))/net$Parameters$Default$MiniBatch)
#  if(MNB==0){MNB=10}
if(MNB<1){MNB=1}
# last cost if batch learning, and median last MNB Costs if mini-batch learning
COSTmedian<-median(as.numeric(tail(unlist(net$history$Cost),MNB)))
if("Predict_Val"%in%names(net)){
CostVal<-net$Predict_Val$metrics$Cost
} else {
CostVal<-0.4
print(paste("lacks validation cost for", f))
}
return(list(COSTsim=COSTsim,COSTmedian=COSTmedian,CostVal=CostVal))
})
MedianLast<-unlist(lapply(COST,function(x)x[["COSTmedian"]]))
names(MedianLast)<-FILES
MedianLast
CostVal<-unlist(lapply(COST,function(x)x[["CostVal"]]))
names(CostVal)<-FILES
CostVal
COST<-lapply(COST,function(x)x[["COSTsim"]])
names(COST)<-FILES
COST
MAX=max(unlist(lapply(COST,length))) # for weights after
MIN=min(unlist(lapply(COST,length))) # for weights after
if(length(unique(unlist(lapply(COST,length))))>1){
COST<-lapply(COST,function(x)x[1:MAX])
}
COST<-do.call("rbind",COST)
dim(COST)
if(ncol(COST)==1){
hist(COST,breaks = 100)
}
MINMAX<-apply(COST,1,function(x){max(which(!is.na(x)))})
MIN<-min(MINMAX);MAX<-max(MINMAX)
CostVal
net$Predict_Val$metrics$Cost
net$history$Cost
Init
MUT
Quant
Quant=3
iStates
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# set the number of training trials
Ntrials<-3
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
rm(list = ls())
print(getwd())
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
DirWrapperGS<-system.file('R/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('R/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
# Print RunTCGAopt() arguments or check documentation
print("RunTCGAopt function arguments:")
print(names(formals(RunTCGAopt)))
?RunTCGAopt
# Print names of hyper-parameters
print("Names of hyper-parameters :")
print(names(Default))
?Default
args<-"--Param MinConnect nblayers --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --lambda 0.01 --iteration 10 --learningrate 0.001 --NewNet T --eSS T"
# set the number of training trials
Ntrials<-3
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
args<-"--Param MeanWinit SdWinit --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --lambda 0.01 --iteration 10 --learningrate 0.001 --MinConnect 4 --nblayers 4 --NewNet T --eSS T"
# set the number of training trials
Ntrials<-10
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
args<-"--Param learningrate lambda --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --iteration 10 --NewNet F --eSS F"
args<-"--Param learningrate lambda --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --iteration 10 --NewNet F --eSS F"
# set the number of training trials
Ntrials<-3
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
load("G:/original_data/Salmon/RNAbase220519.Rdata") # ---> V3 test
x<-load("G:/original_data/Salmon/RNAbase220519.Rdata") #---> V3 test
x
file.info(txi)
SalmonGENEXP<-get(x)
rm(x)
rm(txi)
ncol(SalmonGENEXP$abundance)
NUMFILE<-gsub("_.*","", gsub("foie","", gsub("RE","", gsub("PED","", gsub("Sample_","", gsub("-.*", "", colnames(SalmonGENEXP$abundance)))))))
SalmonGENEXPset<-log2(SalmonGENEXP$abundance+1)
colnames(SalmonGENEXPset)<-gsub("_quant","", gsub("-quant","",colnames(SalmonGENEXPset)))
table(duplicated(NUMFILE)); length(NUMFILE)
DUPL<-NUMFILE[duplicated(NUMFILE)]
DUPL<-DUPL[!duplicated(DUPL)]
RMEANS<-rowMeans(SalmonGENEXPset)
DupCor<-sapply(DUPL,function(x){
return(cor(SalmonGENEXPset[,colnames(SalmonGENEXPset)[NUMFILE%in%x]],RMEANS))
})
rm(RMEANS)
DupCor
if(TRUE){
ToDiscard<-lapply(DupCor,function(x){
x<-as.data.frame(x)
rownames(x)[!x[,1]%in%max(x[,1])]
})
ToDiscard<-as.character(unlist(ToDiscard))
}
table(colnames(SalmonGENEXPset)%in%ToDiscard)
SalmonGENEXPset<-SalmonGENEXPset[,!colnames(SalmonGENEXPset)%in%ToDiscard]
NUMFILE<-gsub("_.*","", gsub("foie","", gsub("RE","", gsub("PED","", gsub("Sample_","", gsub("-.*", "", colnames(SalmonGENEXPset)))))))
dim(SalmonGENEXPset); length(NUMFILE); table(duplicated(NUMFILE))
FusTable <- read.csv2("C:/Users/L_VERLINGUE/Desktop/DITEP/NumDoss/Fustable060319.csv", stringsAsFactors = F)
FusTable$X<-NULL
FusTable$date_biopsie<-FusTable$date_biopsie<-as.Date(FusTable$date_biopsie,format="%d/%m/%Y")
summary(FusTable$date_biopsie)
summary(FusTable$date_biopsie,na.rm=T)
FusTable$date_biopsie
FusTable <- read.csv2("C:/Users/L_VERLINGUE/Desktop/DITEP/NumDoss/Fustable060319.csv", stringsAsFactors = F)
FusTable$date_biopsie
FusTable$date_biopsie<-FusTable$date_biopsie<-as.Date(FusTable$date_biopsie,format="%Y/%m/%d")
summary(FusTable$date_biopsie)
FusTable <- read.csv2("C:/Users/L_VERLINGUE/Desktop/DITEP/NumDoss/Fustable060319.csv", stringsAsFactors = F)
FusTable$date_biopsie<-as.Date(FusTable$date_biopsie,format="%Y/%m/%d")
FusTable$date_biopsie
FusTable <- read.csv2("C:/Users/L_VERLINGUE/Desktop/DITEP/NumDoss/Fustable060319.csv", stringsAsFactors = F)
FusTable$date_biopsie
as.Date(FusTable$date_biopsie)
summary(FusTable$date_biopsie)
as.Date(FusTable$date_biopsie,format="%Y/%m/%d")
as.Date(FusTable$date_biopsie,format="%d/%m/%Y")
for(i in NUMFILE[!NUMFILE%in%FusTable$Personid]){
FusTable[nrow(FusTable)+1,"Personid"]<-i
FusTable[nrow(FusTable),"TCGA"]<-"Unknown"
FusTable[nrow(FusTable),"GlobalHisto"]<-"Unknown"
}
FusTable$RNAdata<-FusTable$Personid%in%NUMFILE
FusTable<-FusTable[!duplicated(FusTable$Personid),]
table(FusTable$RNAdata)
FusTable<-FusTable[FusTable$RNAdata,]
FusTable$TCGA[is.na(FusTable$TCGA)]<-"Unknown"
FusTable$TCGA[FusTable$TCGA==""]<-"miscellaneous"
sort(table(FusTable$TCGA));sum(table(FusTable$TCGA))
table(FusTable$RNAdata)
dim(FusTable)
table(duplicated(FusTable$Personid))
table(FusTable$RNAdata&FusTable$TCGA%in%c("luad", "blca" , "prad", "coadread"))
POP<-FusTable$RNAdata&FusTable$TCGA%in%c("luad", "blca" , "prad", "coadread")
table(POP)
colnames(FusTable)
POPtab<-FusTable[POP,c("NIP","Personid","datae_biopsie","TCGA")]
POPtab<-FusTable[POP,c("NIP","Personid","date_biopsie","TCGA")]
POPtab
write.csv2(POPtab,"D:/Avis/Pedia/POPtab.csv")
write.csv2(POPtab,"D:/Avis/Pedia/POPtab.csv")
match(POPtab$Personid,NUMFILE)
table(colnames(SalmonGENEXPset[,match(POPtab$Personid,NUMFILE)])==POPtab$Personid)
EXPtab<-SalmonGENEXPset[,match(POPtab$Personid,NUMFILE)]
colnames(EXPtab)
cbind(colnames(EXPtab),POPtab$Personid)
write.csv2(EXPtab,"D:/Avis/Pedia/EXPtab.csv")
dim(EXPtab)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
DirWrapperGS<-system.file('R/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('R/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
file.info(DirWrapperDraw)
# Print RunTCGAopt() arguments or check documentation
print("RunTCGAopt function arguments:")
print(names(formals(RunTCGAopt)))
?RunTCGAopt
# Print names of hyper-parameters
print("Names of hyper-parameters :")
print(names(Default))
?Default
args<-"--Param MeanWinit SdWinit --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --MinConnect 4 --nblayers 4 --NewNet T --eSS T"
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirWorkflow
DirHPC<-"/data/tmp/lverling/AMoNet"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
outrun<-ssh::ssh_exec_internal(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow.sh"))
rawToChar(outrun)
outrun
?rawToChar
rawToChar(outrun)
class(outrun)
rawToChar(outrun)
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirHPC<-"/data/tmp/lverling/AMoNet"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
outrun<-ssh::ssh_exec_internal(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow.sh"))
rawToChar(outrun)
outrun
rawToChar(outrun$stderr)
lapply(outrun,rawToChar)
lapply(outrun,rawToChar())
rawToChar(outrun$status)
rawToChar(outrun$stdout)
rawToChar(outrun$stderr)
outrun<-ssh::ssh_exec_internal(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow1.sh"))
rawToChar(outrun$stdout)
rawToChar(outrun$stderr)
DirHPC<-"/data/tmp/lverling/AMoNet"
outrun<-ssh::ssh_exec_internal(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow.sh"))
rawToChar(outrun$stdout)
rawToChar(outrun$stderr)
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
args<-"--Param learningrate lambda --NameProj LUNG_AMoNet_ess --GENESman EGFR MTOR --treatmt --Interval 10 --SelectMECA HALLMARK --organ luad --alpha 1 --iteration 10 --NewNet F --eSS F"
args<-"--Param learningrate lambda --NameProj LUNG_AMoNet_ess --organ luad --alpha 1 --iteration 10 --NewNet F --eSS F"
# set the number of training trials
Ntrials<-2
# run with arguments in a loop
for( i in seq(Ntrials)){
source(file = DirWrapperGS)
}
args<-"--NameProj LUNG_AMoNet_ess --Validation T"
source(DirWrapperDraw)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
library(AMoNet)
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet")
print(getwd())
knitr::opts_knit$set(root.dir = "C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet") #C:/Users/L_VERLINGUE/Desktop/ModelK/Rpack/AMoNet
# check your directory
print(getwd())
XV<-try(library(AMoNet),silent = T)
if("try-error"%in%class(XV)){
print("Installing AMoNet from gitlab. Check your ID and pwd")
devtools::install_git("https://user:password@gitlab.curie.fr/lverling/amonet.git", dependencies = TRUE)
library(AMoNet)
} else {
print("AMoNet loaded")
}
DirWrapperGS<-system.file('R/RunTCGAopt_HPC.R', package='AMoNet')
print(DirWrapperGS)
DirWrapperDraw<-system.file('R/DrawGridSearch.R', package='AMoNet')
print(DirWrapperDraw)
#file.info(DirWrapperDraw)
# Print RunTCGAopt() arguments or check documentation
print("RunTCGAopt function arguments:")
print(names(formals(RunTCGAopt)))
#?RunTCGAopt
# Print names of hyper-parameters
print("Names of hyper-parameters :")
print(names(Default))
#?Default
session <- ssh::ssh_connect("lverling@calcsub.curie.fr")
print(session)
DirWorkflow<-system.file("bash/",package = "AMoNet")
DirWorkflow<-file.path(DirWorkflow, list.files(DirWorkflow))
DirHPC<-"/data/tmp/lverling/AMoNet"
ssh::scp_upload(session, files = c(DirWorkflow, DirWrapperGS, DirWrapperDraw), to = DirHPC,verbose = T)
out<-ssh::ssh_exec_wait(session,command = paste("dos2unix ",DirHPC,"/*",sep = "") )
out<-ssh::ssh_exec_wait(session,command = paste("fromdos ",DirHPC,"/*",sep = "") )
ssh::ssh_exec_wait(session,command = paste("chmod 777 ",DirHPC,"/*",sep = "") )
outrun<-ssh::ssh_exec_internal(session,command = c(paste("cd",DirHPC),"pwd", "sh workflow.sh"))
rawToChar(outrun$stdout)
rawToChar(outrun$stderr)
DirHPC
paste("cd",DirHPC)
